// P-based mask Mask v1.0.0 - Emeric Larochette

float remap(float input, float minIn, float maxIn, float minOut, float maxOut) {
    return minOut + (input - minIn) * (maxOut - minOut) / (maxIn - minIn);
}

shader emmr(color input        = 1,
            int   objectMode   = 0,
            int   axis         = 1 [[ int min = 0, int max = 2 ]],
            float posA         = 0.0,
            float posB         = 1.0,
            int   invertMask   = 0,

            float valueA       = 0.0,
            float valueB       = 1.0,

            int   clampEnable  = 1,
            int   clampCustom  = 0,
            float clampLow     = 0.0,
            float clampHigh    = 1.0,

            output float out   = 0)
{
    vector pos = transform("world", P);
    if (objectMode)
        pos = transform("object", P);

    float mask = remap(pos[axis], posA, posB, valueA, valueB);

    if (invertMask)
        mask = 1 - mask;

    if (clampEnable) {
        mask = clamp(mask, valueA, valueB);
        if (clampCustom)
            mask = clamp(mask, clampLow, clampHigh);
    }
    
    out = mask;
}
    out = mask;
}
