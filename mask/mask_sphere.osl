// Sphere Mask v1.0.0 - Emeric Larochette

float remap(float input, float minIn, float maxIn, float minOut, float maxOut) {
    return minOut + (input - minIn) * (maxOut - minOut) / (maxIn - minIn);
}

shader emms(vector sphereCenter = vector(0.0, 0.0, 0.0),
            float sphereRadius  = 0.5,
            vector sphereScale  = vector(1.0, 1.0, 1.0),
            float sphereFeather = 0.1 [[ float min = 0 ]],
            int   smoothDecay   = 0   [[ string widget = "checkBox" ]],
            int   invertMask    = 0   [[ string widget = "checkBox" ]],

            float valueA        = 0.0,
            float valueB        = 1.0,

            int   clampEnable   = 1   [[ string widget = "checkBox" ]],
            int   clampCustom   = 0   [[ string widget = "checkBox" ]],
            float clampLow      = 0.0,
            float clampHigh     = 1.0,
                
            output float out    = 0.0)
{
    vector P2 = P;
    P2 /= sphereScale;
    
    float dist = distance(P2, sphereCenter);
    float maskLS = linearstep(sphereRadius, sphereRadius + sphereFeather, dist);
    float maskSS = smoothstep(sphereRadius, sphereRadius + sphereFeather, dist);
    float mask = 1 - maskLS;

    if (smoothDecay)
        mask = 1 - maskSS;
    
    if (invertMask)
        mask = 1 - mask;

    if (clampEnable) {
        mask = clamp(mask, valueA, valueB);
        if (clampCustom)
            mask = clamp(mask, clampLow, clampHigh);
    }

    out = mask;
}
